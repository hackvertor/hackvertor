plugins {
    id 'java'
    id "org.javacc.javacc" version "3.0.3"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

targetCompatibility = JavaVersion.VERSION_17
sourceCompatibility = JavaVersion.VERSION_17

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'net.portswigger.burp.extensions:montoya-api:2025.3'
    compileOnly 'net.portswigger.burp.extender:burp-extender-api:1.7.22'
    testImplementation(
            'net.portswigger.burp.extensions:montoya-api:2025.3',
            'net.portswigger.burp.extender:burp-extender-api:1.7.22',
            'org.assertj:assertj-swing-junit:3.17.1',
            'junit:junit:4.13.2',
            'org.junit.jupiter:junit-jupiter:5.9.2'
    )
    implementation 'commons-codec:commons-codec:1.15'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.unbescape:unbescape:1.1.6.RELEASE'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.70'
    implementation 'com.auth0:java-jwt:4.3.0'
    implementation 'org.json:json:20230227'
    implementation 'commons-io:commons-io:2.14.0'
    implementation 'org.apache.commons:commons-compress:1.22'
    implementation 'org.brotli:dec:0.1.2'
    implementation 'org.python:jython-standalone:2.7.3b1'
    implementation 'bsf:bsf:2.4.0'
    implementation 'org.apache-extras.beanshell:bsh:2.0b6'
    implementation 'org.codehaus.groovy:groovy-all:3.0.16'
    implementation 'com.github.javafaker:javafaker:1.0.2'
    implementation 'com.fifesoft:autocomplete:3.3.1'
    implementation 'org.graalvm.js:js-community:24.1.1'
    implementation 'org.graalvm.js:js-scriptengine:24.1.1'
}

sourceSets {
    main {
        java {
            srcDir compileJavacc.outputDirectory
        }
    }
}

compileJavacc {
    inputDirectory = file('src/main/javacc')
    include '**/*.java'
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archivesBaseName = project.name + '-all'
    from {
        configurations.runtimeClasspath.findAll { it.isDirectory() || it.name.endsWith('.jar') }
                .collect { it.isDirectory() ? it : zipTree(it) }
    }{
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
        exclude "META-INF/*.txt"
    }
}

tasks.withType(Jar) {
    destinationDirectory = file("$rootDir/releases/")
}

test {
    useJUnitPlatform()
    jvmArgs '--add-opens', 'java.base/java.util=ALL-UNNAMED'
}

shadowJar {
    archiveClassifier.set('')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    configurations = [project.configurations.runtimeClasspath]
    mergeServiceFiles()
}
